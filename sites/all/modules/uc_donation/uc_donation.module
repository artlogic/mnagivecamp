<?php

/**
 * @file
 * Provides a donation product type.
 *
 * Allows the creation of donation products. These products by default are not
 * shippable and allow an end user to specify an amount to donate before adding
 * it to the cart. Once added to the cart the user can there also change the
 * amount of the donation.
 *
 * Written by greenSkin. Development sponsored by BibleInfo.com.
 */
/* * *****************************************************************************
 * Hook Functions (Drupal)
 * **************************************************************************** */

/**
 * Implementation of hook_menu().
 */
/* function uc_donation_menu($may_cache) {
  $items = array();
  if ($may_cache) {
  $items[] = array(
  'path' => 'admin/store/reports/donations',
  'title' => t('Donation reports'),
  'description' => t('View reports for all store donations'),
  'callback' => 'uc_donation_reports',
  'access' => user_access('view reports'),
  'type' => MENU_NORMAL_ITEM,
  );
  }
  return $items;
  } */

/**
 * Implements hook_permission().
 */
function uc_donation_permission() {
  $perms = array(
      'administer products' => array(
          'title' => t('administer products'),
          'description' => t('TODO Add a description for \'administer products\''),
      ),
      'administer product classes' => array(
          'title' => t('administer product classes'),
          'description' => t('TODO Add a description for \'administer product classes\''),
      ),
      'administer product features' => array(
          'title' => t('administer product features'),
          'description' => t('TODO Add a description for \'administer product features\''),
      ),
  );
  foreach (node_type_get_types () as $type) {
    if ($type->module == 'uc_donation') {
      $name = check_plain($type->type);
      $perms['create ' . $name . ' products'] = array('title' => 'create ' . $name . ' products');
      $perms['edit own ' . $name . ' products'] = array('title' => 'edit own ' . $name . ' products');
      $perms['edit all ' . $name . ' products'] = array('title' => 'edit all ' . $name . ' products');
      $perms['delete own ' . $name . ' products'] = array('title' => 'delete own ' . $name . ' products');
      $perms['delete all ' . $name . ' products'] = array('title' => 'delete all ' . $name . ' products');
    }
  }
  return $perms;
}

/**
 * Implements hook_theme().
 */
function uc_donation_theme() {
  return array(
      'uc_donation_add_to_cart' => array(
          'variables' => array('node' => NULL, 'teaser' => 0, 'page' => 0)
      )
  );
}

/**
 * Implements hook_node_access().
 */
function uc_donation_node_access($node, $op, $account) {
  return uc_product_node_access($op, $node, $account); 
}

/**
 * Implements hook_node_info().
 */
function uc_donation_node_info($reset = FALSE) {
  return array(
      'donation' => array(
          'name' => t('Donation'),
          'base' => 'uc_donation',
          'description' => t("This node displays the representation of a donation product allowing a user to specify their own amount for the donation. The same features are available as a regular product to allow for donation products that contain shippable products."),
          'title_label' => t('Name'),
          'body_label' => t('Description')
      )
  );
}

/**
 * Implements hook_form_alter().
 */
function uc_donation_form_alter(&$form, &$form_state, $form_id) {
  if (substr($form_id, 0, 27) == 'uc_product_add_to_cart_form') {
    $node = $form['#parameters'][2];
    if ($node->type == 'donation') {
      $form['donate_amount'] = array(
          '#type' => 'textfield',
          '#title' => t('Amount'),
          '#default_value' => number_format($node->sell_price, 2),
          '#size' => 6,
          '#maxlength' => 10,
          '#required' => TRUE,
          '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
          '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : ''
      );
      $form['submit']['#value'] = variable_get('add_to_cart_text_donation', 'Add to cart');
      $form['submit']['#weight'] = 10;
      $form['#validate'][] = 'uc_donation_add_to_cart_form_validate';
    }
  }
  if ($form_id == 'uc_cart_view_form') {
    $form['items']['#columns']['donate_amount'] = array('cell' => t('Amount'), 'weight' => 3);
    $form['items']['#columns']['qty']['weight']++;
    $form['items']['#columns']['total']['weight']++;
    $form['#validate'][] = 'uc_donation_cart_view_validate';

    // Add spacer to regular products for amount column
    foreach (element_children($form['items']) as $item) {
      if (isset($form['items'][$item]['module']) && $form['items'][$item]['module']['#value'] != 'uc_donation') {
        $form['items'][$item]['desc']['#cell_attributes']['colspan'] = '2';
      }
    }
  }
  if ($form_id == 'node_type_form') {
    if ($form['#node_type']->type == 'donation') {
      $form['add_to_cart_text'] = array(
          '#type' => 'textfield',
          '#title' => t('Add to cart button text'),
          '#default_value' => variable_get('add_to_cart_text_donation', 'Add to cart'),
          '#required' => TRUE,
          '#weight' => -1
      );
      $form['update_cart_item'] = array(
          '#type' => 'checkbox',
          '#title' => t('Update donation in cart when the same donation product is added again.'),
          '#default_value' => variable_get('update_cart_item_donation', TRUE),
          '#weight' => 0
      );
    }
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_donation_forms($form_id, $args) {
  $forms = array();
  $product = isset($args[0]) && is_object($args[0]) ? $args[0] : NULL;
  if (isset($product->type) && $product->type == 'donation') {
    $forms['uc_product_add_to_cart_form_' . $product->nid] = array('callback' => 'uc_product_add_to_cart_form');
    $forms['uc_catalog_buy_it_now_form_' . $product->nid] = array('callback' => 'uc_donation_buy_it_now_form');
  }
  return $forms;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_donation_form(&$node) {
  $form = uc_product_form($node);

  $form['#validate'][] = 'uc_product_validate';
  return $form;
}

/**
 * Implements hook_insert().
 */
function uc_donation_insert($node) {
  uc_product_insert($node);
}

/**
 * Implements hook_update().
 */
function uc_donation_update($node) {
  uc_product_update($node);
}

/**
 * Implements hook_load().
 */
function uc_donation_load($nodes) {
  uc_product_load($nodes);
}

/**
 * Implements hook_delete().
 */
function uc_donation_delete(&$node) {
  uc_product_delete($node);
}

/**
 * Implements hook_view().
 */
function uc_donation_view($node, $teaser = 0, $page = 0) {
  uc_product_view($node, $teaser, $page);
  unset($node->content['display_price']);
  $node->content['add_to_cart']['#value'] = theme('uc_donation_add_to_cart', array('node' => $node));
  return $node;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_donation_add_to_cart_form_validate($form, &$form_state) {
  $donate_amount = floatval(ereg_replace('[^0-9\.]*', '', $form_state['values']['donate_amount']));
  if (!is_numeric($donate_amount) || $donate_amount <= 0) {
    form_set_error('donate_amount', t('You have entered an invalid amount.'));
  }
  else {
    form_set_value($form['donate_amount'], $donate_amount, $form_state);
  }
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_donation_buy_it_now_form($form_state, $node) {
  $form = uc_catalog_buy_it_now_form($form_state, $node);
  $form['donate_amount'] = array(
      '#type' => 'textfield',
      '#title' => t('Amount'),
      '#default_value' => number_format($node->sell_price, 2),
      '#size' => 6,
      '#maxlength' => 10,
      '#required' => TRUE,
      '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
      '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : '',
      '#weight' => 0
  );
  $form['submit']['#weight'] = 1;
  array_unshift($form['#validate'], 'uc_donation_add_to_cart_form_validate');
  return $form;
}

/**
 * @todo Please document this function.
 * @see http://drupal.org/node/1354
 */
function uc_donation_cart_view_validate($form, &$form_state) {
  foreach ($form_state['values']['items'] as $key => $item) {
    if (isset($item['donate_amount'])) {
      $donate_amount = floatval(ereg_replace('[^0-9\.]*', '', $item['donate_amount']));
      $data = unserialize($item['data']);
      $prev_data = $data;
      $data['data'] = $prev_data;
      $data['donate_amount'] = $donate_amount;
      if (!is_numeric($donate_amount) || $donate_amount <= 0) {
        form_set_error('items][' . $key . '][donate_amount', t('You have entered an invalid amount.'));
      }
      else {
        form_set_value($form['items'][$key]['donate_amount'], $donate_amount, $form_state);
        form_set_value($form['items'][$key]['data'], serialize($data), $form_state);
      }
    }
  }
}

/* * *****************************************************************************
 * Hook Functions (Ubercart)
 * **************************************************************************** */

/**
 * Implements hook_product_types().
 */
function uc_donation_uc_product_types() {
  return array_keys(uc_donation_node_info());
}

/**
 * Implements hook_cart_item().
 */
function uc_donation_uc_cart_item($op, &$item) {
  switch ($op) {
    case 'load':
      $node = node_load($item->nid);
      if ($node->type == 'donation') {
        $item->module = 'uc_donation';
        if ($item->data['donate_amount'] != NULL) {
          $item->price = $item->data['donate_amount'];
        }
      }
      break;
  }
}

/**
 * Implements hook_cart_display().
 */
function uc_donation_uc_cart_display($item) {
  $element = uc_product_uc_cart_display($item);
  $element['module']['#value'] = 'uc_donation';
  $element['qty'] = array(
      '#type' => 'hidden',
      '#value' => $item->qty
  );
  $element['donate_amount'] = array(
      '#type' => 'textfield',
      '#default_value' => number_format($item->price, 2),
      '#size' => 6,
      '#maxlength' => 10,
      '#field_prefix' => variable_get('uc_sign_after_amount', FALSE) ? '' : variable_get('uc_currency_sign', '$'),
      '#field_suffix' => variable_get('uc_sign_after_amount', FALSE) ? variable_get('uc_currency_sign', '$') : ''
  );

  return $element;
}

/**
 * Implements hook_add_to_cart().
 *
 * Removes donation item from cart if it is being updated with a different amount.
 */
function uc_donation_uc_add_to_cart($nid, $qty, $data) {
  if (variable_get('update_cart_item_donation', TRUE)) {
    $node = node_load($nid);
    if ($node->type == 'donation') {
      $items = uc_cart_get_contents();
      if (!empty($items) && isset($data['attributes'])) {
        foreach ($items as $item) {
          if ($item->nid == $nid) {
            if ($data['attributes'] == $item->data['attributes']) {
              $cid = uc_cart_get_id();
              uc_cart_remove_item($item->nid, $cid, $item->data);
            }
          }
        }
      }
    }
  }
}

/**
 * Update information about a specific item in current cart.
 */
function uc_donation_uc_update_cart_item($nid, $data = array(), $qty, $cid = NULL) {
  if (!$nid) {
    return NULL;
  }
  $cid = !(is_null($cid) || empty($cid)) ? $cid : uc_cart_get_id();

  $prev_data = $data['data'];
  unset($data['data']);

  if ($qty < 1) {
    uc_cart_remove_item($nid, $cid, $data);
  }
  else {
    // TODO Please review the conversion of this statement to the D7 database API syntax.
    /* db_query("UPDATE {uc_cart_products} SET qty = %d, changed = %d, data = '%s' WHERE nid = %d AND cart_id = '%s' AND data = '%s'", $qty, REQUEST_TIME, serialize($data), $nid, $cid, serialize($prev_data)) */
    db_update('uc_cart_products')
            ->fields(array(
                'qty' => $qty,
                'changed' => REQUEST_TIME,
                'data' => serialize($data),
            ))
            ->condition('nid', $nid)
            ->condition('cart_id', $cid)
            ->condition('data', serialize($prev_data))
            ->execute();
    cache_clear_all();
  }

  // Rebuild the items hash
  uc_cart_get_contents(NULL, 'rebuild');
}

/**
 * Implements hook_add_to_cart_data().
 */
function uc_donation_uc_add_to_cart_data($form_values) {
  return array('donate_amount' => $form_values['donate_amount']);
}

/* * *****************************************************************************
 * Hook Functions (TAPIr)
 * **************************************************************************** */

/**
 * Implements hook_tapir_table_alter().
 */
function uc_donation_tapir_table_alter(&$table, $table_id) {
  if ($table_id == 'uc_product_table') {
    $products = FALSE;
    foreach ($table['#parameters'][1] as $key => $nid) {
      $node = node_load($nid);
      if ($node->type == 'donation') {
        $table[$key]['price']['#value'] = '';
      }
      else {
        $products = TRUE;
      }
    }
    if (!$products) {
      unset($table['#columns']['price']);
    }
  }
}

/* * *****************************************************************************
 * Callback Functions, Forms, and Tables
 * **************************************************************************** */

/**
 * Wrap the "Add to Cart" form in a <div>.
 *
 * @ingroup themeable
 */
function theme_uc_donation_add_to_cart($variables) {
  $node = $variables['node'];
  $teaser = $variables['teaser'];
  $page = $variables['page'];
  $output = theme('uc_product_add_to_cart', array('node' => $node, 'teaser' => $teaser, 'page' => $page));
  return $output;
}

/**
 * Display the product reports
 */
function uc_donation_reports() {
  $output = t("The following are all donation products listed in the store, their amount sold, how many times it has been viewed*, and the revenue they have produced. If you do not see the number of views you must enable the statistics module on the ") . l('module administration page', 'admin/modules') . ".";
  $statistics = db_query("SELECT status FROM {system} WHERE name = :name", array(':name' => 'statistics'))->fetchField();
  $count_views = variable_get('statistics_count_content_views', FALSE);
  $page = (!is_null($_GET['page'])) ? intval($_GET['page']) : 0;

  if ($statistics && $count_views) {
    $header = array(
        array('data' => t('#')),
        array('data' => t('Donation Product'), 'field' => 'n.title'),
        array('data' => t('Views'), 'field' => 'c.totalcount'),
        array('data' => t('Sold'), 'field' => 'sold'),
        array('data' => t('Revenue'), 'field' => 'revenue', 'sort' => 'desc'),
    );
    $sql = "SELECT n.nid, n.title, c.totalcount, (SELECT SUM(qty) FROM {uc_order_products} as p LEFT JOIN {uc_orders} as o ON p.order_id = o.order_id WHERE o.order_status = 'completed' AND p.nid = n.nid) as sold, (SELECT SUM(p2.price) FROM {uc_order_products} as p2 LEFT JOIN {uc_orders} as o2 ON p2.order_id = o2.order_id WHERE o2.order_status = 'completed' AND p2.nid = n.nid) as revenue FROM {node} as n LEFT JOIN {node_counter} as c ON n.nid = c.nid WHERE type = 'donation' GROUP BY n.nid DESC";
  }
  else {
    $header = array(
        array('data' => t('#')),
        array('data' => t('Product'), 'field' => 'n.title'),
        array('data' => t('Sold'), 'field' => 'sold'),
        array('data' => t('Revenue'), 'field' => 'revenue', 'sort' => 'desc'),
    );
    $sql = "SELECT n.nid, n.title, (SELECT SUM(qty) FROM {uc_order_products} as p LEFT JOIN {uc_orders} as o ON p.order_id = o.order_id WHERE o.order_status = 'completed' AND p.nid = n.nid) as sold, (SELECT SUM(p2.price) FROM {uc_order_products} as p2 LEFT JOIN {uc_orders} as o2 ON p2.order_id = o2.order_id WHERE o2.order_status = 'completed' AND p2.nid = n.nid) as revenue FROM {node} as n WHERE type = 'donation' GROUP BY n.nid DESC";
  }
  $sql_count = "SELECT COUNT(nid) FROM {node} WHERE type = 'donation'";
  $products = pager_query($sql . tablesort_sql($header), variable_get('uc_reports_table_size', 30), 0, $sql_count);

  foreach ($products as $product) {
    //while ($product = db_fetch_array($products)) {
    $product = (array) $product;
    if ($statistics && $count_views) {
      $rows[] = array(
          array('data' => ($page * variable_get('uc_reports_table_size', 30)) + (count($rows) + 1)),
          array('data' => l($product['title'], 'node/' . ($product['nid']))),
          array('data' => (empty($product['totalcount'])) ? 0 : $product['totalcount']),
          array('data' => (empty($product['sold'])) ? 0 : $product['sold']),
          array('data' => uc_currency_format((empty($product['revenue'])) ? 0 : $product['revenue']), 'nowrap' => 'nowrap'),
      );
    }
    else {
      $rows[] = array(
          array('data' => ($page * variable_get('uc_reports_table_size', 30)) + (count($rows) + 1)),
          array('data' => l($product['title'], 'node/' . ($product['nid']))),
          array('data' => (empty($product['sold'])) ? 0 : $product['sold']),
          array('data' => uc_currency_format((empty($product['revenue'])) ? 0 : $product['revenue']), 'nowrap' => 'nowrap'),
      );
    }
  }
  if (empty($rows)) {
    $rows[] = array(array('data' => t('No products found'), 'colspan' => count($header)));
  }
  $output .= theme('table', array('header' => $header, 'rows' => $rows, 'attributes' => array('width' => '100%', 'class' => 'uc-sales-table')));
  $output .= "<small>*" . t('Make sure %setting_name is set to %state in the ', array('%setting_name' => 'count content views', '%state' => 'enabled')) . l(t('access log settings page'), 'admin/logs/settings') . t(' to enable views column.') . "</small>";
  $output .= theme_pager(NULL, variable_get('uc_reports_table_size', 30));

  return $output;
}
